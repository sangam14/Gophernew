<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0" 
    xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Elixir School</title>
        <description>The premier destination for learning and mastering Elixir</description>
        <link>http://localhost:4000</link>
        <atom:link href="http://localhost:4000/feed.xml" rel="self" type="application/rss+xml" />
    
        <item>
            <title>Real-Time SVG Charts with Contex and LiveView</title>
            <description>This post is inspired by some of my work, together with Bruce Tate, on Pragmatic Bookshelf’s upcoming book on LiveView. Elixir School is happy to be able to offer a give-away of a small number e-books once they are published, so stay tuned for updates! As LiveView matures it is becoming clear that it much more than just a tool for building real-time features in your web app. LiveView is a state management system for...</description>
            <pubDate>Tue, 06 Oct 2020 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/server-side-svg-charts-with-contex-and-liveview/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/server-side-svg-charts-with-contex-and-liveview/</guid>
        </item>
    
        <item>
            <title>Instrumenting Phoenix with Telemetry Part IV: Erlang VM Measurements with `telemetry_poller`</title>
            <description>Table Of Contents In this series, we’re instrumenting a Phoenix app and sending metrics to StatsD with the help of Elixir and Erlang’s Telemetry offerings. Part I: Telemetry Under The Hood Part II: Handling Telemetry Events with TelemetryMetrics + TelemetryMetricsStatsd Part III: Observing Phoenix + Ecto Telemetry Events Part IV: Erlang VM Measurements with telemetry_poller, TelemetryMetrics + TelemetryMetricsStatsd Intro In the previous post we used Telemetry.Metrics to define metrics for a number of out-of-the-box Phoenix...</description>
            <pubDate>Wed, 13 May 2020 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/instrumenting-phoenix-with-telemetry-part-four/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/instrumenting-phoenix-with-telemetry-part-four/</guid>
        </item>
    
        <item>
            <title>Instrumenting Phoenix with Telemetry Part III: Phoenix + Ecto Telemetry Events</title>
            <description>Table Of Contents In this series, we’re instrumenting a Phoenix app and sending metrics to StatsD with the help of Elixir and Erlang’s Telemetry offerings. Part I: Telemetry Under The Hood Part II: Handling Telemetry Events with TelemetryMetrics + TelemetryMetricsStatsd Part III: Observing Phoenix + Ecto Telemetry Events Part IV: Erlang VM Measurements with telemetry_poller, TelemetryMetrics + TelemetryMetricsStatsd Intro In the previous post, we saw how the Telemetry.Metrics and TelemetryMetricsStatsd libraries abstracted away the need...</description>
            <pubDate>Wed, 06 May 2020 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/instrumenting_phoenix_with_telemetry_part_three/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/instrumenting_phoenix_with_telemetry_part_three/</guid>
        </item>
    
        <item>
            <title>Instrumenting Phoenix with Telemetry Part II: Telemetry Metrics + Reporters</title>
            <description>Table Of Contents In this series, we’re instrumenting a Phoenix app and sending metrics to StatsD with the help of Elixir and Erlang’s Telemetry offerings. Part I: Telemetry Under The Hood Part II: Handling Telemetry Events with TelemetryMetrics + TelemetryMetricsStatsd Part III: Observing Phoenix + Ecto Telemetry Events Part IV: Erlang VM Measurements with telemetry_poller, TelemetryMetrics + TelemetryMetricsStatsd Intro In Part I of this series, we learned why observability is important and introduced Erlang’s Telemetry...</description>
            <pubDate>Wed, 29 Apr 2020 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/instrumenting_phoenix_with_telemetry_part_two/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/instrumenting_phoenix_with_telemetry_part_two/</guid>
        </item>
    
        <item>
            <title>Instrumenting Phoenix with Telemetry and LiveDashboard</title>
            <description>The recent release of the LiveDashboard library allows us to visualize our application metrics, performance and behavior in real-time. In this post, we’ll add LiveDashboard to our Phoenix app, examine the out-of-the-box features and take a look under the hood to understand how LiveDashboard hooks into Telemetry events in order to visualize them. The App We’ll be working with the Phoenix app we set up for our Telemetry series of blog posts, Quantum. The Quantum...</description>
            <pubDate>Fri, 24 Apr 2020 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/instrumenting-phoenix-with-live-dashboard/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/instrumenting-phoenix-with-live-dashboard/</guid>
        </item>
    
        <item>
            <title>Instrumenting Phoenix with Telemetry Part I: Telemetry Under The Hood</title>
            <description>Table Of Contents In this series, we’re instrumenting a Phoenix app and sending metrics to StatsD with the help of Elixir and Erlang’s Telemetry offerings. A brief overview of what we’ll cover: Part I: Telemetry Under The Hood Part II: Handling Telemetry Events with TelemetryMetrics + TelemetryMetricsStatsd Part III: Observing Phoenix + Ecto Telemetry Events Part IV: Erlang VM Measurements with telemetry_poller, TelemetryMetrics + TelemetryMetricsStatsd In Part I we’ll start out by setting up a...</description>
            <pubDate>Wed, 22 Apr 2020 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/instrumenting-phoenix-with-telemetry-part-one/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/instrumenting-phoenix-with-telemetry-part-one/</guid>
        </item>
    
        <item>
            <title>LiveView Design Patterns - LiveComponent and the Single Responsibility Principle</title>
            <description>LiveView Can Get Messy As LiveView becomes a more established technology, we naturally find ourselves using it to back more and more complex features. If we’re not careful, this can lead to “fat controller syndrome”––live views that are jam packed with complex business logic and disparate responsibilities, just like the classic “fat Rails controller”. How can we write live views that are easy to reason about and maintain while adhering to common design principles like...</description>
            <pubDate>Sun, 29 Dec 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/live-view-live-component/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/live-view-live-component/</guid>
        </item>
    
        <item>
            <title>Building Elixir School's Admissions portal</title>
            <description>If you didn’t know, Elixir School has its own Slack where contributors can gather to discuss our organization’s content and projects but most importantly, support one another in our Elixir journey. When we set out to create our own Slack we wanted to address a big concern with many public Slacks: the signal to noise ratio is bad, there’s just too much spam. Have you contributed to an Elixir School project but not joined us...</description>
            <pubDate>Wed, 23 Oct 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/building-admissions/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/building-admissions/</guid>
        </item>
    
        <item>
            <title>Building a Table Sort UI with Live View's `live_link`</title>
            <description>LiveView makes it easy to solve for some of the most common UI challenges with little to no front-end code. It allows us to save JavaScript for the hard stuff––for complex and sophisticated UI changes. In building out a recent admin-facing view that included a table of student cohorts at the Flatiron School, I found myself reaching for LiveView. In just a few lines of backend code, my sortable table was up and running. Keep...</description>
            <pubDate>Sun, 20 Oct 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/sorting-a-table-with-live-view-live-links/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/sorting-a-table-with-live-view-live-links/</guid>
        </item>
    
        <item>
            <title>Releasing an Umbrella App with Docker, Mix Release and Config</title>
            <description>The prelease of Elixir 1.9 earlier this year introduced some powerful new tools. mix release allows us to build a release without Distillery; configuration for our umbrella child apps has been moved to the parent application; the addition of the Config module deprecates Mix.Config and makes it easy to configure our releases, and configuration has been further simplified with the addition of functions like System.fetch_env!. Let’s take advantage of all of these new features in...</description>
            <pubDate>Fri, 20 Sep 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/releasing-an-umbrella-app-with-docker-and-mix-release/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/releasing-an-umbrella-app-with-docker-and-mix-release/</guid>
        </item>
    
        <item>
            <title>Dispatch From ElixirConf 2019</title>
            <description>This year’s ElixirConf, in Colorado, really reflected the growing and thriving nature of the Elixir community. It was a jam-packed two days of workshops and two days of multi-track talks that showcased the increasingly diverse and innovative people and technologies that Elixir has to offer. The Workshops This year, Elixir School was thrilled to be offering two days of ElixirConf workshops. The goal of both workshops was to guide participants through building their very own...</description>
            <pubDate>Sun, 08 Sep 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/elixirconf-2019-review/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/elixirconf-2019-review/</guid>
        </item>
    
        <item>
            <title>TIL How to Select Merge with Ecto.Query</title>
            <description>Working with Elixir and Ecto, I’ve run into scenarios where I needed to retrieve data from a table plus maybe a field or two from an unassociated table. In the past, whenever this happened, I’d usually spin up something I wasn’t totally satisfied with – maybe updating the schema(s), breaking it up into multiple queries, or building a multi-select statement if I was feeling fancy. Happily, today I learned there’s a better way. You can...</description>
            <pubDate>Fri, 23 Aug 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/til-ecto-select-merge/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/til-ecto-select-merge/</guid>
        </item>
    
        <item>
            <title>Reviewing Elixir Conf EU 2019</title>
            <description>Last year, it was my first time ever participating in the conference. I wanted to go off and see what this community had to offer me, as Elixir is the first language I have seriously considered working with as a professional. So, 2019 being my second back-to-back participation, I think can provide a direct comparison on how things have fared in our European join. Sponsored Ticket From the beginning, we would like to thank ElixirConfEU,...</description>
            <pubDate>Thu, 06 Jun 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/elixir-conf-eu-2019-review/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/elixir-conf-eu-2019-review/</guid>
        </item>
    
        <item>
            <title>Using Channels with LiveView for Better UX</title>
            <description>LiveView has given us the ability to implement flexible and responsive UX almost entirely with server-side code. But what happens when our need for a responsive UI surpasses what LiveView seemingly offers? When the demands of a particular feature have us reaching for JavaScript? It is possible to incorporate custom JS into the LiveView life cycle with the help of a custom LiveView channel and a Registry. Keep reading to see how we did it!...</description>
            <pubDate>Tue, 04 Jun 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/live-view-with-channels/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/live-view-with-channels/</guid>
        </item>
    
        <item>
            <title>Tracking Users in a Chat App with LiveView, PubSub Presence</title>
            <description>After playing with LiveView and leveraging Phoenix PubSub to broadcast messages to all of a live view’s clients, I wanted to try incorporating Phoenix Presence to track the state of these clients. So this past weekend I built a chat app using Phoenix LiveView, PubSub and Presence. The LiveView clocks in at 90 lines of code, and I was able to get the Presence-backed features up and running in no time! Keep reading to see...</description>
            <pubDate>Tue, 21 May 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/live-view-with-presence/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/live-view-with-presence/</guid>
        </item>
    
        <item>
            <title>ElixirConf 2019 Announcement</title>
            <description>We have some very exciting news to announce today! Elixir School and ElixirConf are partnering up to offer two days of in-person workshops! What could make this exciting announce even better? LiveView, obviously! Join us for two days of hands-on training with Phoenix, Channels, LiveView, and property-based testing. We’ll look at the role these technologies play in today’s real-time web and how we can build bulletproof features in our applications. But wait — there’s even...</description>
            <pubDate>Wed, 01 May 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/elixirconf-announcement/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/elixirconf-announcement/</guid>
        </item>
    
        <item>
            <title>TIL Using Erlang Ports</title>
            <description>Erlang ports provide us an interface for communicating with external processes by sending and receiving messages. The Elixir Port module is built on top of Erlang’s ports and makes it easy to start and manage OS processes. Creating a port to execute a given OS process can be done with the open/2 function: cmd = &quot;echo hello&quot; Port.open({:spawn, cmd}, [:binary]) # =&amp;gt; #Port&amp;lt;0.5&amp;gt; Here, we pass open/2 the :spawn tuple that contains the binary we...</description>
            <pubDate>Wed, 17 Apr 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/til-ports/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/til-ports/</guid>
        </item>
    
        <item>
            <title>Building Real-Time Features with Phoenix Live View and PubSub</title>
            <description>In an earlier post, we used the brand new (still pre-release at time of writing) Phoenix LiveView library to build a real-time feature with very little backend code and even less JavaScript. LiveView allowed us to easily connect our client to the server via a socket and push updates down to our client. In an app that allows users to “deploy” a repo to GitHub, we achieved the following real-time functionality: But what happens when...</description>
            <pubDate>Thu, 11 Apr 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/live-view-with-pub-sub/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/live-view-with-pub-sub/</guid>
        </item>
    
        <item>
            <title>TIL Ecto Constraints and Validations</title>
            <description>Developers want to create the best applications they can for their users. In the process, they want to make sure to give good feedback to their users when data doesn’t get saved into the database. In Elixir, there is a great tool on top of the database that helps – Ecto! It can put validations and constraints onto specific fields to ensure data integrity. However, did you know they are differences between validations and constraints?...</description>
            <pubDate>Mon, 25 Mar 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/til-ecto-validations-and-constraints/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/til-ecto-validations-and-constraints/</guid>
        </item>
    
        <item>
            <title>Walk-Through of Phoenix LiveView</title>
            <description>It’s here! Phoenix LiveView leverages server-rendered HTML and Phoenix’s native WebSocket tooling so you can build fancy real-time features without all that complicated JavaScript. If you’re sick to death of writing JS (I had a bad day with Redux, don’t ask), then this is the library for you! Phoenix LiveView is brand brand new so I thought I’d provide a short write-up of a super simple demo I built for anyone looking to get up...</description>
            <pubDate>Tue, 19 Mar 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/phoenix-live-view/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/phoenix-live-view/</guid>
        </item>
    
        <item>
            <title>Elixir Supervisor Strategies</title>
            <description>One of the things that makes OTP and Elixir unique is the model of supervisor behaviour that applications can take with different processes they start. In this post we will examine each of the three available in Elixir by making a supervised app. To start, we make a supervised application: mix new counter --sup cd counter Now that we have an app, we are going to create 3 modules. They will all be GenServers that...</description>
            <pubDate>Thu, 21 Feb 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/supervisor-strategies/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/supervisor-strategies/</guid>
        </item>
    
        <item>
            <title>TIL GenServer's `handle_continue/2`</title>
            <description>What happens when starting up your GenServer requires executing a long-running process? We don’t want the execution of that process to block the GenServer from completing start-up. We also don’t want to execute that process asynchronously in a way that creates a race condition between the running of the process and other messages arriving in our GenServer’s inbox. In this post, we’ll take a closer look at these two problems and understand how OTP 21’s...</description>
            <pubDate>Fri, 15 Feb 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/til-genserver-handle-continue/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/til-genserver-handle-continue/</guid>
        </item>
    
        <item>
            <title>Deploying our `Plug.Router` application to Heroku</title>
            <description>In our previous post, Building web apps with Plug.Router we built a website using just Plut.Router. Today we’ll explore how to take the previous app we built and get it up and running on Heroku; this post won’t focus on Phoenix deployments. In this (brief) post, we will show how to get things up and running on Heroku for a vanilla Plug app. It really is quite easy, but today when I set out to...</description>
            <pubDate>Tue, 12 Feb 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/putting-a-plug-app-on-heroku/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/putting-a-plug-app-on-heroku/</guid>
        </item>
    
        <item>
            <title>TIL about `Process.send_after/4`</title>
            <description>Executing code later or creating reoccurring tasks can be tricky but did you know we can accomplish this in Elixir with just a process? With a GenServer, Process.send_after/4, and the handle_info/2 callback we have everything we need. Let’s look at Process.send_after/4 and the expected arguments: send_after(dest, msg, time, opts \\ []) The dest argument takes the pid or name of our process, we’ll use a named GenServer for our example. The msg we want sent...</description>
            <pubDate>Thu, 07 Feb 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/til-send-after/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/til-send-after/</guid>
        </item>
    
        <item>
            <title>Building web apps with Plug.Router</title>
            <description>When it comes to building a web application with Elixir many people will immediately reach for Phoenix. However, did you know Plug.Router is just as viable an option? Sometimes, it can be even faster. The project For this project we’ll build a simple single page portfolio site. We can expect our site to load and display our portfolio from a file, database, or somewhere else dynamically. As well as allowing users to submit contact information...</description>
            <pubDate>Fri, 25 Jan 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/building-apps-with-plug-router/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/building-apps-with-plug-router/</guid>
        </item>
    
        <item>
            <title>Understanding Recursion with Elixir</title>
            <description>“Recursion” can be a scary word for those of us unfamiliar with its applications. In this post, we’ll de-mystify the concept of recursion and gain a deeper understanding of how and why to use it by writing our very own recursive function in Elixir. What is Recursion In short, “recursion” is when a function calls itself. First we’ll look at a contrived example. Later on in this post we’ll build a more practical recursive function....</description>
            <pubDate>Sat, 19 Jan 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/recursion/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/recursion/</guid>
        </item>
    
        <item>
            <title>Connecting Elixir to Kafka with Kaffe</title>
            <description>If we want to use the popular messaging system Kafka with our Elixir projects, we have a few wrappers we can choose from. This blogpost covers integrating one of them, Kaffe, which doesn’t have a lot of resources and therefore can be tricky to troubleshoot. In this codealong we’ll build a simple Elixir application and use Kaffe to connect it to a locally running Kafka server. Later we’ll cover a couple of variations to connect...</description>
            <pubDate>Tue, 15 Jan 2019 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/elixir-kaffe-codealong/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/elixir-kaffe-codealong/</guid>
        </item>
    
        <item>
            <title>TIL How to Run Tests for One Child App in an Umbrella</title>
            <description>If you’re working on an Elixir umbrella app with multiple children, then you know that running the tests for the entire umbrella app isn’t always ideal. It could take a while to run and it can be hard to zero in on one particular set of failures when deving on just of the child apps. So, how can you run tests for just one specific child app? Not Like This My first attempt to run...</description>
            <pubDate>Mon, 17 Dec 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/til-umbrella-app-child-app-tests/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/til-umbrella-app-child-app-tests/</guid>
        </item>
    
        <item>
            <title>TIL How to Run Ecto Migrations on Production</title>
            <description>You’d think the answer to this question would be a simple Google search away. Unfortunately, that wasn’t the case for me this afternoon, working on a Phoenix project with a newly-added Ecto backend. In an effort to save others (and let’s be honest, future me) the same frustration, here’s the most straight-forward solutions I found. What Doesn’t Work Mix. Mix tasks aren’t compiled into your deployed release, and as evidenced in this exciting discussion, there’s...</description>
            <pubDate>Sun, 16 Dec 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/til-how-to-run-ecto-migrations-in-production/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/til-how-to-run-ecto-migrations-in-production/</guid>
        </item>
    
        <item>
            <title>TIL about ExUnit's capture_log option</title>
            <description>Have you ever run mix test and seen red error messages being logged when, in fact, all your tests are passing? This can often occur when adding test coverage for “sad path” code flows that include calls to Logger.error/1. Here’s a (slightly contrived) example of some code that demonstrates the problem. The GithubClient.get_user_repos/1 function takes a GitHub username, makes a request to the GitHub API and returns a list of the user’s repositories. Note the...</description>
            <pubDate>Wed, 12 Dec 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/til-capture-log-in-exunit-tests/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/til-capture-log-in-exunit-tests/</guid>
        </item>
    
        <item>
            <title>TIL about `IO.inspect/2`'s `:label` opt</title>
            <description>If you’ve ever found yourself debugging Elixir then you’re probably familiar with IO.inspect/2 but just in case let’s see an example of how we might use it: defmodule Example do def sanitize_params(params) do params |&amp;gt; IO.inspect() |&amp;gt; Map.take([&quot;quantity&quot;, &quot;price&quot;]) |&amp;gt; IO.inspect() |&amp;gt; Enum.into(%{}, fn {k, v} -&amp;gt; {k, String.to_integer(v)} end) end end Our function is simple: Given a map, take some keys, and cast them to integers; for this example we won’t worry about invalid...</description>
            <pubDate>Tue, 04 Dec 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/til-io-inspect-labels/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/til-io-inspect-labels/</guid>
        </item>
    
        <item>
            <title>JWT Auth in Elixir with Joken</title>
            <description>JSON Web Tokens, or JWTs, allow us to authenticate requests between the client and the server by encrypting authentication information into a secure, compact JSON object that is digitally signed. In this post, we’ll use the Joken library to implement JWT auth in a Phoenix app. We’ll focus on JWTs that are signed using a ECDSA private/public key pair, although you can also sign JWTs using an HMAC algorithm. Getting Started First things first, we...</description>
            <pubDate>Thu, 29 Nov 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/jwt-auth-with-joken/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/jwt-auth-with-joken/</guid>
        </item>
    
        <item>
            <title>Reviewing Elixircards</title>
            <description>For the next part of this series, we are reviewing 6 decks from Elixircards My first contact with Elixircards was from a demo deck they gave away at ElixirConf EU 2018. I really liked the idea but the deck only had a handful of cards in it and the quality of them was not there. Unfortunately, the demo wasn’t a good enough sample to really motivate me to buy a set. For this review, Elixircards...</description>
            <pubDate>Wed, 14 Nov 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/elixir-cards-review/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/elixir-cards-review/</guid>
        </item>
    
        <item>
            <title>A brief guide to Ecto.Multi</title>
            <description>Ecto.Multi is a set of utilities aimed at composing and executing atomic operations, usually (but not always, as you’ll see soon) performed against the database. Furthermore, it handles rollbacks, provides results on either success or error, flattens-out nested code and saves multiple round trips to the database. If you find yourself running and managing many database queries (and other operations), then keep reading and you may find some useful tools to add your Elixir/Ecto toolbox....</description>
            <pubDate>Wed, 07 Nov 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/ecto-multi/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/ecto-multi/</guid>
        </item>
    
        <item>
            <title>Umbrellas: only when it rains?</title>
            <description>The umbrella application is a powerful tool available to us that a lot of users are unfamiliar with. In this post we’ll look at umbrella applications and why we might want to consider using them for our next project. Project types Before we can understand when to use umbrellas and the role they play, let’s review the types of projects available. For all intents and purposes there are three project types in the Erlang and...</description>
            <pubDate>Mon, 22 Oct 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/umbrellas-just-when-it-rains/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/umbrellas-just-when-it-rains/</guid>
        </item>
    
        <item>
            <title>Agnostic Version Management With asdf</title>
            <description>What is it? Oftentimes we need to use multiple versions of our tools. Many communities have their own things to do this. In Ruby we have chruby, rbenv, rvm and more, NodeJS has nvm. These tools allow us to easily and quickly switch what we are using for a given project or environment. Today were going to talk about my favorite version manager of choice, asdf, because it lets you manage multiple languages with just...</description>
            <pubDate>Mon, 01 Oct 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/asdf-version-management/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/asdf-version-management/</guid>
        </item>
    
        <item>
            <title>Reviewing Functional Web Development with Elixir, OTP, and Phoenix</title>
            <description>Our first review was quite popular and the feedback we received has been wonderful! We want to thank everyone for their support and take a moment to congratulate our raffle winners. As part of our review series we hope to release at least one review per month. Along with these reviews, we’re hoping to be able to offer additional discounts and giveaways. For the next part of this series, we are reviewing Functional Web Development...</description>
            <pubDate>Wed, 22 Aug 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/functional-web-dev-elixir-otp-phoenix-review/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/functional-web-dev-elixir-otp-phoenix-review/</guid>
        </item>
    
        <item>
            <title>Ecto query composition</title>
            <description>Ecto is fantastic tool that provides us with a great degree of flexibility. In this blog post we’ll look at how we can dynamically build our Ecto queries and sanitize our input data at the same time. Let’s plan to approach our composition in 3 steps: Create the base query we’ll build upon Compose our query from input criteria Execute our final query For our example we’ll be working with everyone’s favorite example project: a...</description>
            <pubDate>Wed, 25 Jul 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/ecto-query-composition/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/ecto-query-composition/</guid>
        </item>
    
        <item>
            <title>Configuration Demystified</title>
            <description>There’s been a lot of discussion about configuration in the community lately. We thought this would be an opportune time to discuss configuration and how best to handle it within an Elixir application. It is surprising to see how a small change to our applications configuration can eliminate much of the headaches others are experiencing. Configuration types Before we go any further, let’s look at the two configuration types and the roles they play. Runtime...</description>
            <pubDate>Tue, 17 Jul 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/configuration-demystified/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/configuration-demystified/</guid>
        </item>
    
        <item>
            <title>Reviewing Elixir in Action, Second Edition</title>
            <description>Welcome to the first post in our new series reviewing various learning material available for Elixir. Of course you’re probably thinking “Elixir School is the best!” and we agree, but as we explore other material to improve our own we want to share it with you along with our thoughts. To get us started, we’re going to kick off our series with a review of Saša Jurić’s newest book Elixir in Action, Second Edition. Note...</description>
            <pubDate>Mon, 18 Jun 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/elixir-in-action-review/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/elixir-in-action-review/</guid>
        </item>
    
        <item>
            <title>Just the beginning</title>
            <description>Welcome, Bem-vindo, Bienvenido! We’re happy to share with you the all new Elixir School blog: Appendix! As part of our 2018 initiatives to bring you even more awesomeness at Elixir School we’re rolling out some exciting new changes. In this post we’ll cover some of those changes and some of the exciting ways you can get involved. Appendix With our blog we hope to allow you to follow along with our projects, join us for...</description>
            <pubDate>Mon, 23 Apr 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/just-the-beginning/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/just-the-beginning/</guid>
        </item>
    
        <item>
            <title>A look at Elixir 1.6</title>
            <description>January 17th was like any other day until something exciting happened: José gave Elixir 1.6 to the people. Much like the versions before it this one continues the trend of feature packed releases made possible by the collaborative efforts of many. Let’s take a look together at the exciting features made it into the 1.6 release and how they play into our applications. Code Formatter While some may not think a code formatter is essential...</description>
            <pubDate>Mon, 02 Apr 2018 00:00:00 +0530</pubDate>
            <link>http://localhost:4000/blog/a-look-at-16/</link>
            <guid isPermaLink="true">http://localhost:4000/blog/a-look-at-16/</guid>
        </item>
    
    </channel>
</rss>
